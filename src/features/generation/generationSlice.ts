import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import {apiUrl} from "../../apiUtils";

export interface Generation {
    name: string;
    url: string;
    index: number;
}

interface GeenrationsResponse {
    results: Generation[];
    count: number;
}

export interface GenerationState {
    generations: Generation[];
    selectedGeneration: number;
    status: 'idle' | 'loading' | 'failed';
}

const initialState: GenerationState = {
    generations: [],
    selectedGeneration: 1,
    status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getGenerations = createAsyncThunk(
    'generations/fetchList',
    async () => {
        const response = await fetch(apiUrl + "/generation", {});
        return await response.json() as GeenrationsResponse;
    }
);

export const generationSlice = createSlice({
    name: 'generation',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        selectGeneration: (state, action: PayloadAction<number>) => {
            state.selectedGeneration = action.payload;
        },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(getGenerations.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(getGenerations.fulfilled, (state: GenerationState, action) => {
                state.status = 'idle';
                const generations = action.payload.results as Generation[];
                generations.forEach(generation => {
                   const parsedUrl = generation.url.split('/');
                   generation.index = parseInt(parsedUrl[parsedUrl.length-2]);
                });

                state.generations = generations;
            });
    },
});

export const { selectGeneration } = generationSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const generationsSelector = (state: RootState) => state.generation;

export default generationSlice.reducer;