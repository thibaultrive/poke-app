import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import {apiUrl} from "../../apiUtils";

export interface Resource {
    name: string;
    url: string;
}

interface PokemonsResponse {
    id: string;
    pokemon_species: Resource[];
    version_groups: Resource[];
}

export interface PokemonsState {
    species: Resource[];
    versions: Resource[];
    status: 'idle' | 'loading' | 'failed';
}

const initialState: PokemonsState = {
    species: [],
    versions: [],
    status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getSpecies = createAsyncThunk(
    'species/fetchList',
    async (version: number) => {
        const response = await fetch(apiUrl + "/generation/" + version, {});
        return await response.json() as PokemonsResponse;
    }
);

export const speciesSlice = createSlice({
    name: 'species',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {},
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(getSpecies.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(getSpecies.fulfilled, (state: PokemonsState, action) => {
                state.status = 'idle';
                state.species = action.payload.pokemon_species;
                state.versions = action.payload.version_groups;
            });
    },
});

export const speciesSelector = (state: RootState) => state.species;

export default speciesSlice.reducer;